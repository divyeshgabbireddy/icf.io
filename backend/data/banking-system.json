{
  "id": "banking-system",
  "title": "Simplified Banking System",
  "description_overview": "Your task is to implement a simplified version of a banking system. All operations that should be supported are listed below. Solving this task consists of several levels. Subsequent levels are opened when the current level is correctly solved. You always have access to the data for the current and all previous levels.",
  "description_roadmap": "Level 1: Account creation, deposits, transfers.\nLevel 2: Ranking spenders.\nLevel 3: Scheduled payments with cashback.\nLevel 4: Account merging & balance history.\n\nPass all tests at each level to advance.",
  "initial_code_stub": "class Main:\n    def __init__(self):\n        pass\n",
  "levels": [
    {
      "level_number": 1,
      "title": "Account Creation, Deposits, and Transfers",
      "description_specific": "Initially, the banking system does not contain any accounts, so implement operations to allow account creation, deposits, and transfers between 2 different accounts.\n\ncreate_account(self, timestamp: int, account_id: str) -> bool — should create a new account with the given identifier if it doesn't already exist. Returns True if the account was successfully created or False if an account with account_id already exists.\n\ndeposit(self, timestamp: int, account_id: str, amount: int) -> int | None — should deposit the given amount of money to the specified account account_id. Returns the balance of the account after the operation has been processed. If the specified account doesn't exist, should return None.\n\ntransfer(self, timestamp: int, source_account_id: str, target_account_id: str, amount: int) -> int | None — should transfer the given amount of money from account source_account_id to account target_account_id. Returns the balance of source_account_id if the transfer was successful or None otherwise.\nReturns None if source_account_id or target_account_id doesn't exist.\nReturns None if source_account_id and target_account_id are the same.\nReturns None if account source_account_id has insufficient funds to perform the transfer.",
      "test_cases_preview": [
        "create_account(100, 'acc1') -> True",
        "create_account(110, 'acc1') -> False",
        "deposit(120, 'acc1', 1000) -> 1000",
        "deposit(125, 'acc-unknown', 500) -> None",
        "create_account(130, 'acc2') -> True",
        "deposit(135, 'acc2', 200) -> 200",
        "transfer(140, 'acc1', 'acc2', 300) -> 700",
        "transfer(150, 'acc2', 'acc1', 1000) -> None (insufficient funds)",
        "transfer(160, 'acc1', 'acc1', 50) -> None (same account)",
        "transfer(170, 'acc1', 'acc-unknown', 50) -> None (target doesn't exist)"
      ],
      "test_cases": [
        {
          "name": "level1_comprehensive_scenario",
          "calls": [
            {"method": "create_account", "args": [10, "alice"], "expected_return": true},
            {"method": "create_account", "args": [20, "bob"], "expected_return": true},
            {"method": "create_account", "args": [30, "alice"], "expected_return": false},
            {"method": "create_account", "args": [40, "carol"], "expected_return": true},
            {"method": "deposit", "args": [50, "alice", 1000], "expected_return": 1000},
            {"method": "deposit", "args": [60, "bob", 500], "expected_return": 500},
            {"method": "deposit", "args": [70, "alice", 200], "expected_return": 1200},
            {"method": "deposit", "args": [80, "dave_non_existent", 100], "expected_return": null},
            {"method": "deposit", "args": [90, "bob", 0], "expected_return": 500},
            {"method": "deposit", "args": [100, "carol", -50], "expected_return": 0},
            {"method": "deposit", "args": [105, "carol", 100], "expected_return": 100},
            {"method": "transfer", "args": [110, "alice", "alice", 100], "expected_return": null},
            {"method": "transfer", "args": [120, "dave_non_existent", "bob", 50], "expected_return": null},
            {"method": "transfer", "args": [130, "alice", "eve_non_existent", 50], "expected_return": null},
            {"method": "transfer", "args": [140, "bob", "alice", 600], "expected_return": null},
            {"method": "transfer", "args": [150, "alice", "bob", 300], "expected_return": 900},
            {"method": "transfer", "args": [160, "bob", "carol", 200], "expected_return": 600},
            {"method": "transfer", "args": [170, "alice", "bob", 0], "expected_return": 900},
            {"method": "transfer", "args": [180, "carol", "alice", -50], "expected_return": 300},
            {"method": "transfer", "args": [190, "carol", "alice", 300], "expected_return": 0},
            {"method": "transfer", "args": [200, "carol", "bob", 1], "expected_return": null},
            {"method": "deposit", "args": [210, "carol", 50], "expected_return": 50},
            {"method": "transfer", "args": [220, "alice", "carol", 1150], "expected_return": 50}
          ]
        }
      ]
    },
    {
      "level_number": 2,
      "title": "Ranking Spenders",
      "description_specific": "The bank wants to identify people who are not keeping money in their accounts, so implement operations to support ranking accounts based on outgoing transactions.\n\ntop_spenders(self, timestamp: int, n: int) -> list[str] — should return the identifiers of the top n accounts with the highest outgoing transactions (the total amount of money transferred out or paid/withdrawn). Results must be **sorted in descending order of total outgoing amount**, and if two accounts tie, break the tie **alphabetically by account_id in ascending order**. The output format is:\n\n    [\"<account_id_1>(<total_outgoing_1>)\", \"<account_id_2>(<total_outgoing_2>)\", ..., \"<account_id_n>(<total_outgoing_n>)\"]\n\nIf fewer than n accounts exist, return all of them in the same format. (Cashback from Level 3 does not count toward outgoing totals.)",
      "test_cases_preview": [
        "# e.g., top_spenders(200,2) -> ['alice(200)','bob(0)']"
      ],
      "test_cases": [
        {
          "name": "level2_basic_ranking",
          "calls": [
            {"method":"create_account","args":[10,"alice"],"expected_return":true},
            {"method":"create_account","args":[20,"bob"],"expected_return":true},
            {"method":"deposit","args":[30,"alice",500],"expected_return":500},
            {"method":"deposit","args":[40,"bob",300],"expected_return":300},
            {"method":"transfer","args":[50,"alice","bob",200],"expected_return":300},
            {"method":"top_spenders","args":[60,2],"expected_return":["alice(200)","bob(0)"]}
          ]
        }
      ]
    },
    {
      "level_number": 3,
      "title": "Scheduled Payments with Cashback",
      "description_specific": "Implement scheduled payments that give 2% cashback after 24h, and track status.\n\npay(self, timestamp:int, account_id:str, amount:int)->str|None — should process a payment from the specified account. Returns a unique payment identifier if the payment was successfully scheduled or None if the account doesn't have sufficient funds or doesn't exist. The payment amount should be immediately deducted from the account balance. After 24 hours (in timestamp units, so timestamp+86400), the account will receive a 2% cashback of the payment amount.\n\nget_payment_status(self, timestamp:int, account_id:str, payment:str)->str|None — should return the status of a specified payment for the given account. Possible statuses are: \"IN_PROGRESS\" (payment is scheduled but cashback not yet received), \"CASHBACK_RECEIVED\" (payment completed and cashback credited to account), or None if the payment identifier doesn't exist for the specified account.",
      "test_cases_preview": [
        "# e.g., pay(100,'alice',100)->'payment1', get_payment_status(...)->'IN_PROGRESS'"
      ],
      "test_cases": [
        {
          "name": "level3_cashback_flow",
          "calls": [
            {"method":"create_account","args":[10,"alice"],"expected_return":true},
            {"method":"deposit","args":[20,"alice",1000],"expected_return":1000},
            {"method":"pay","args":[30,"alice",500],"expected_return":"payment1"},
            {"method":"get_payment_status","args":[40,"alice","payment1"],"expected_return":"IN_PROGRESS"},
            {"method":"get_payment_status","args":[8640030,"alice","payment1"],"expected_return":"CASHBACK_RECEIVED"}
          ]
        }
      ]
    },
    {
      "level_number": 4,
      "title": "Account Merging and Balance History",
      "description_specific": "Merge two accounts, carrying over balances and histories.\n\nmerge_accounts(self, timestamp:int, account_id1:str, account_id2:str)->bool — should merge the second account into the first account. Returns True if the merge was successful or False if either account doesn't exist. After merging, the second account should no longer exist, and the first account should have the combined balance of both accounts. All transaction history should be preserved.\n\nget_balance(self, timestamp:int, account_id:str, time_at:int)->int|None — should return the balance of the specified account at the given time_at timestamp. Returns None if the account doesn't exist at the current timestamp. If the account exists but no transactions were made before time_at, return 0.",
      "test_cases_preview": [
        "# e.g., merge_accounts(...)->True, get_balance(...)->..."
      ],
      "test_cases": [
        {
          "name": "level4_merge_and_balance",
          "calls": [
            {"method":"create_account","args":[10,"a1"],"expected_return":true},
            {"method":"deposit","args":[20,"a1",100],"expected_return":100},
            {"method":"create_account","args":[30,"a2"],"expected_return":true},
            {"method":"deposit","args":[40,"a2",50],"expected_return":50},
            {"method":"merge_accounts","args":[50,"a1","a2"],"expected_return":true},
            {"method":"get_balance","args":[60,"a1",60],"expected_return":150},
            {"method":"get_balance","args":[60,"a2",60],"expected_return":null}
          ]
        }
      ]
    }
  ]
}